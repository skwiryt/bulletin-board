{"version":3,"sources":["redux/initialState.js","config.js","redux/postsRedux.js","redux/store.js","redux/userRedux.js","components/layout/PageNav/PageNav.js","components/layout/Header/Header.js","components/layout/MainLayout/MainLayout.js","components/common/SubmitPostForm/SubmitPostForm.js","components/common/PageHeader/PageHeader.js","components/views/PostEdit/PostEdit.js","components/views/PostAdd/PostAdd.js","components/views/UserPosts/UserPosts.js","components/common/PostsList/PostsList.js","components/views/Homepage/Homepage.js","components/views/Post/Post.js","components/views/NotFound/NotFound.js","components/features/Routes/Routes.js","App.js","serviceWorker.js","index.js","components/views/Post/Post.module.scss","components/layout/PageNav/PageNav.module.scss","components/common/SubmitPostForm/SubmitPostForm.module.scss","components/common/PageHeader/PageHeader.module.scss","components/common/PostsList/PostsList.module.scss"],"names":["initialState","posts","data","requests","LOAD_POSTS","active","error","ADD_POST","user","loggedIn","id","role","PHOTO_URL","getAll","createActionName","name","REQUEST_START","REQUEST_SUCCESS","REQUEST_ERROR","requestStart","payload","type","requestSuccess","requestError","reducers","statePart","action","Object","keys","forEach","item","combinedReducers","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","get","Container","connect","state","className","clsx","styles","root","Button","link","exact","to","activeClassName","component","NavLink","href","Link","Component","children","AppBar","Toolbar","post","props","sent","handleChange","target","value","setState","setImage","files","file","photo","clearError","submitForm","e","preventDefault","title","length","text","email","validator","isEmail","formData","FormData","key","append","submitAction","render","request","phone","price","location","buttonText","defaultImageOption","defaultImages","Alert","severity","AlertTitle","onClose","CircularProgress","Grid","container","spacing","xs","TextField","onChange","defaultValue","label","variant","fullWidth","multiline","Box","box","submitButton","onClick","color","FormControl","withIcon","imgExtension","maxFileSize","withPreview","singleImage","React","defaultProps","Paper","titlePaper","Typography","editPost","entries","pair","console","log","find","p","match","params","addPost","dispatch","arg","a","axios","API_URL","response","direction","justifyContent","alignItems","Table","TableBody","map","TableRow","TableCell","loadPosts","loadedPosts","useEffect","imageLoaded","componentDidMount","fetchPost","setImageLoaded","booleanValue","author","edit","image","placeholder","onLoad","visible","hidden","src","alt","editDate","status","publishDate","path","UserPosts","PostAdd","PostEdit","Homepage","NotFound","Post","theme","createTheme","palette","primary","main","App","StylesProvider","injectFirst","ThemeProvider","CssBaseline","Boolean","window","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.fc2ecedc.chunk.js","sourcesContent":["export const initialState = {\n  posts: {\n    data: [],\n    requests: {\n      LOAD_POSTS: {\n        active: false,\n        error: false,\n      },\n      ADD_POST: {\n        active: false,\n        error: false,\n      },\n    },/*\n    loading: {\n      active: false,\n      error: false,\n    },*/\n  },\n  user: {\n    loggedIn: true,\n    id: '1234568',\n    role: 'user',\n  },\n  //komentarz w komponencie Post.js\n  /*\n  selectedPost: {\n    data: [],\n    requests: {\n      post: {\n        active: false,\n        error: false,\n      },\n      get: {\n        active: false,\n        error: false,\n      },\n    },\n  },\n  */\n};\n","export const API_URL = process.env.NODE_ENV === 'production' ? '/api' : 'http://localhost:8000/api';\n// export const PHOTO_URL = process.env.NODE_ENV === 'production' ? '/uploads' : 'http://localhost:8000/uploads';\n\nexport const PHOTO_URL = 'https://portcharitystore.blob.core.windows.net/bulletin-board';","import axios from 'axios';\nimport { API_URL } from '../config';\n\n/* selectors */\nexport const getAll = ({posts}) => posts.data;\nexport const getPost = ({posts}, id) => posts.data.find(p => p.id === id);\nexport const getRequest = ({posts}, type) => posts.requests[type];\n\n/* action name creator */\nconst reducerName = 'posts';\nconst createActionName = name => `app/${reducerName}/${name}`;\n\n/* action types */\nconst REQUEST_START = createActionName('REQUEST_START');\nconst REQUEST_SUCCESS = createActionName('REQUEST_SUCCESS');\nconst REQUEST_ERROR = createActionName('REQUEST_ERROR');\n\nconst LOAD_POSTS = createActionName('LOAD_POSTS');\nconst ADD_POST = createActionName('ADD_POST');\n\n\n/* action creators */\nexport const requestStart = payload => ({ payload, type: REQUEST_START });\nexport const requestSuccess = payload => ({ payload, type: REQUEST_SUCCESS });\nexport const requestError = payload => ({ payload, type: REQUEST_ERROR });\nexport const loadPosts = payload => ({ payload, type: LOAD_POSTS });\nexport const addPost = payload => ({payload, type: ADD_POST });\n\n/* thunk creators */\nexport const loadPostsRequest = loadedPosts => {\n  console.log('loadPostsRequest thunk is called, and !loadedPosts.length: ', !loadedPosts.length);\n  if (typeof loadedPosts !== 'undefined' && !loadedPosts.length) {\n    return async dispatch => {\n      console.log('dispatch for fetch fired by Thunk');\n      dispatch(requestStart('LOAD_POSTS'));\n      try {\n        const response = await axios.get(API_URL + '/posts');\n        dispatch(loadPosts(response.data));\n        dispatch(requestSuccess('LOAD_POSTS'));\n        console.log('response.data: ', response.data);\n      } catch(err) {\n        // dispatch(requestError(err.message || true));\n        dispatch(requestError('LOAD_POSTS'));\n      }\n    };\n  } else {\n    return dispatch => {\n      dispatch(requestSuccess('LOAD_POSTS'));\n    };\n  }\n};\n\nexport const addPostRequest = (formData) => {\n  \n  return async (dispatch) => {\n    for (var pair of formData.entries()) {\n      console.log(pair[0]+ ', ' + pair[1]); \n    }\n    dispatch(requestStart('ADD_POST'));\n    try {\n      const response = await axios.post(API_URL + '/posts', formData);\n      dispatch(addPost(response.data));\n      dispatch(requestSuccess('ADD_POST'));\n    } catch (err) {\n      dispatch(requestError('ADD_POST'));\n    }\n    \n   \n  };\n};\n/* reducer */\nexport const reducer = (statePart = [], action = {}) => {\n  switch (action.type) {\n    case ADD_POST: {\n      return {\n        ...statePart,\n        data: [...statePart.data, action.payload],\n      };\n    }\n    case LOAD_POSTS: {\n      return {\n        ...statePart,\n        data: action.payload,\n      };\n    }\n    case REQUEST_START : {\n      return {\n        ...statePart, requests: {...statePart.requests, [action.payload]: {active: true, error: false}},\n      };  \n    }\n    case REQUEST_SUCCESS : {\n      return {\n        ...statePart, requests: {...statePart.requests, [action.payload]: {active: false, error: false}},\n      };\n    }\n    case REQUEST_ERROR : {\n      return {\n        ...statePart, requests: {...statePart.requests, [action.payload]: {active: false, error: true}},\n      };\n    }\n    /*\n    case REQUEST_START: {\n      return {\n        ...statePart,\n        loading: {\n          active: true,\n          error: false,\n        },\n      };\n    }\n    case REQUEST_SUCCESS: {\n      return {\n        ...statePart,\n        loading: {\n          active: false,\n          error: false,\n        },\n        // data: action.payload,\n      };\n    }\n    case REQUEST_ERROR: {\n      return {\n        ...statePart,\n        loading: {\n          active: false,\n          error: action.payload,\n        },\n      };\n    }\n    */\n    default:\n      return statePart;\n  }\n};\n","import {combineReducers, createStore, applyMiddleware} from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nimport { initialState } from './initialState';\nimport { reducer as postsReducer } from './postsRedux';\n// import { reducer as selectedPostReducer } from './selectedPostRedux'; // komentarz w komponencie Post.js\n\n// define reducers\nconst reducers = {\n  posts: postsReducer,\n  // selectedPost: selectedPostReducer,\n};\n\n// add blank reducers for initial state properties without reducers\nObject.keys(initialState).forEach(item => {\n  if (typeof reducers[item] == 'undefined') {\n    reducers[item] = (statePart = null) => statePart;\n  }\n});\n\nconst combinedReducers = combineReducers(reducers);\n\n// create store\nexport const store = createStore(\n  combinedReducers,\n  initialState,\n  composeWithDevTools(\n    applyMiddleware(thunk)\n  )\n);\n","/* selectors */\nexport const get = ({user}) => user;\n\n/* action name creator */\nconst reducerName = 'posts';\nconst createActionName = name => `app/${reducerName}/${name}`;\n\n/* action types */\nconst FETCH_START = createActionName('FETCH_START');\nconst FETCH_SUCCESS = createActionName('FETCH_SUCCESS');\nconst FETCH_ERROR = createActionName('FETCH_ERROR');\n\n/* action creators */\nexport const fetchStarted = payload => ({ payload, type: FETCH_START });\nexport const fetchSuccess = payload => ({ payload, type: FETCH_SUCCESS });\nexport const fetchError = payload => ({ payload, type: FETCH_ERROR });\n\n/* thunk creators */\n\n/* reducer */\nexport const reducer = (statePart = [], action = {}) => {\n  switch (action.type) {\n    case FETCH_START: {\n      return {\n        ...statePart,\n        loading: {\n          active: true,\n          error: false,\n        },\n      };\n    }\n    case FETCH_SUCCESS: {\n      return {\n        ...statePart,\n        loading: {\n          active: false,\n          error: false,\n        },\n        data: action.payload,\n      };\n    }\n    case FETCH_ERROR: {\n      return {\n        ...statePart,\n        loading: {\n          active: false,\n          error: action.payload,\n        },\n      };\n    }\n    default:\n      return statePart;\n  }\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport clsx from 'clsx';\n\nimport { connect } from 'react-redux';\n// import { reduxSelector, reduxActionCreator } from '../../../redux/exampleRedux.js';\nimport { get } from '../../../redux/userRedux.js';\n\nimport styles from './PageNav.module.scss';\nimport { Button } from '@material-ui/core';\nimport { NavLink, Link } from 'react-router-dom';\n\nconst Component = ({className, user}) => {\n  return (\n    <nav className={clsx(className, styles.root)}>\n      <Button className={styles.link} exact to={`/`} activeClassName='active' component={NavLink}>Home</Button>\n\n      { !user.loggedIn && <Button className={styles.link} href='https://google.com' component='a'>Log in</Button> }\n      { user.loggedIn && <Button className={styles.link} to={`/`} component={Link}>Log out</Button> }       \n      { user.loggedIn && <Button className={styles.link} exact to={`/userposts/${user.id}`} activeClassName='active' component={NavLink}>My Posts</Button> }      \n    \n    </nav>\n  );\n};\n\nComponent.propTypes = {\n  className: PropTypes.string,\n  user: PropTypes.object,\n};\n\nconst mapStateToProps = state => ({\n  user: get(state),\n});\n\n// const mapDispatchToProps = dispatch => ({\n//   someAction: arg => dispatch(reduxActionCreator(arg)),\n// });\n\n// const Container = connect(mapStateToProps, mapDispatchToProps)(Component);\nconst Container = connect(mapStateToProps)(Component);\n\nexport {\n  // Component as PageNav,\n  Container as PageNav,\n  Component as PageNavComponent,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport clsx from 'clsx';\n\n// import { connect } from 'react-redux';\n// import { reduxSelector, reduxActionCreator } from '../../../redux/exampleRedux.js';\n\nimport styles from './Header.module.scss';\nimport { AppBar, Container, Toolbar } from '@material-ui/core';\nimport { PageNav } from '../PageNav/PageNav';\n\nconst Component = ({className, children}) => (\n  <div className={clsx(className, styles.root)}>\n    <AppBar>\n      <Container>\n        <Toolbar>\n          <PageNav></PageNav>\n        </Toolbar>        \n      </Container>\n    </AppBar>\n    <Container>\n      <Toolbar />\n    </Container>\n\n   \n  </div>\n);\n\nComponent.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n};\n\n// const mapStateToProps = state => ({\n//   someProp: reduxSelector(state),\n// });\n\n// const mapDispatchToProps = dispatch => ({\n//   someAction: arg => dispatch(reduxActionCreator(arg)),\n// });\n\n// const Container = connect(mapStateToProps, mapDispatchToProps)(Component);\n\nexport {\n  Component as Header,\n  // Container as Header,\n  Component as HeaderComponent,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Container } from '@material-ui/core';\n\nimport clsx from 'clsx';\n\nimport { Header } from '../Header/Header';\n\n// import { connect } from 'react-redux';\n// import { reduxSelector, reduxActionCreator } from '../../../redux/exampleRedux.js';\n\nimport styles from './MainLayout.module.scss';\n\nconst Component = ({className, children}) => (\n  <div className={clsx(className, styles.root)}>\n    <Header />\n    <Container>\n      {children}\n    </Container>\n  </div>\n);\n\nComponent.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n};\n\n// const mapStateToProps = state => ({\n//   someProp: reduxSelector(state),\n// });\n\n// const mapDispatchToProps = dispatch => ({\n//   someAction: arg => dispatch(reduxActionCreator(arg)),\n// });\n\n// const Container = connect(mapStateToProps, mapDispatchToProps)(Component);\n\nexport {\n  Component as MainLayout,\n  // Container as MainLayout,\n  Component as MainLayoutComponent,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Grid, TextField, FormControl, Button, CircularProgress, Box } from '@material-ui/core';\nimport { Alert, AlertTitle } from '@material-ui/lab';\nimport ImageUploader from 'react-images-upload';\n\nimport clsx from 'clsx';\nimport validator from 'validator';\nimport { get } from '../../../redux/userRedux';\nimport { connect } from 'react-redux';\n// import { reduxSelector, reduxActionCreator } from '../../../redux/exampleRedux.js';\nimport { PHOTO_URL } from '../../../config';\n\nimport styles from './SubmitPostForm.module.scss';\n// import './SubmitPostForm.module.scss';\n\n/*\n\n<div className={clsx(className, styles.root)}>\n*/\n\nclass Component extends React.Component  {\n  \n  state = {\n    post: {...this.props.post},\n    error: false,\n    sent: false,\n  };\n\n  handleChange = ({target}) => {\n    const { post } = this.state;\n    const { name, value } = target;\n    this.setState({post: {...post, [name]: value}});    \n  }\n\n  setImage = (files) => {\n    const { post } = this.state;\n    if(files) this.setState({ post: { ...post, file: files[0] }});\n    else this.setState({ photo: { ...post, file: null }});\n  };\n  clearError = () => {\n    this.setState({ error: null });\n  }\n\n  submitForm = (e) => {\n    const { post } = this.state;\n    const { user } = this.props;\n    e.preventDefault();\n\n    let error = null;\n\n    // if(!post.file && !post.photo) error = 'You have to select an image';\n    if(!post.title.length || !post.text.length || !post.email.length) error = `You can't leave title, text or email fields empty`;\n    else if(post.title.length > 25) error = `Title can't be longer than 25 characters`;\n    else if(post.title.length < 10) error = `Title can't be shorter than 10 characters`;\n    else if(post.text.length < 20) error = `Text can't be shorter than 20 characters`;\n    else if(!validator.isEmail(post.email)) error =  `Enter valid email`;\n\n    if(!error) {\n      const formData = new FormData();\n\n      ['email', 'text', 'title', 'phone', 'price', 'location'].forEach(key => {\n        formData.append(key, post[key]);\n      });\n      formData.append('author', user.id);\n\n      if(post.file) {\n        formData.append('photo', post.file);\n      }      \n\n      this.props.submitAction(formData);\n      this.setState({ error: null, sent: true });\n    }\n    else this.setState({ error });\n  }\n\n  render = () => {\n    const { className, request } = this.props;\n    const { title, text, email, phone, price, location, photo, file} = this.state.post;\n    const { error, sent } = this.state;\n    const { handleChange, setImage, submitForm, clearError } = this;\n\n    const buttonText = photo || file ? 'Change image' : 'Choose image';\n    const defaultImageOption = photo ? { defaultImages: [`${PHOTO_URL}/${photo}`]} : {};\n\n    return (\n      <div className={clsx(className, styles.root)}>\n        <form>\n          { (sent && !request.active && !request.error) && <Alert severity=\"success\"><AlertTitle>Success</AlertTitle>Your post has been successfully submitted!</Alert> }\n          { (sent && request.error) && <Alert severity=\"error\"><AlertTitle>Error</AlertTitle>Request error</Alert> }\n          { (error) && <Alert severity=\"error\" onClose={clearError}><AlertTitle>Error</AlertTitle>{ error }</Alert> }\n          { (sent && request.active) && <CircularProgress /> }\n          { (!sent) &&\n            (\n              <Grid container spacing={5}>\n                <Grid item xs={6} >             \n                  <TextField onChange={handleChange} defaultValue={title} id=\"title\" name=\"title\" label=\"Title\" variant=\"filled\" fullWidth/>              \n                  <TextField onChange={handleChange} multiline defaultValue={text} id=\"text\" label=\"Text\" name=\"text\" variant=\"filled\" fullWidth/>\n                  <TextField onChange={handleChange} defaultValue={email} id=\"email\" label=\"Email\" name=\"email\" variant=\"filled\" fullWidth/>\n                  <TextField onChange={handleChange} defaultValue={phone} id=\"phone\" label=\"Phone\" name=\"phone\" variant=\"filled\" fullWidth/>\n                  <TextField onChange={handleChange} defaultValue={price} id=\"price\" label=\"Price\" name=\"price\" variant=\"filled\" fullWidth/>\n                  <TextField onChange={handleChange} defaultValue={location} id=\"location\" label=\"Location\" name=\"location\" variant=\"filled\" fullWidth/>\n                  <Box component=\"p\" className={styles.box} >\n                    <Button className={styles.submitButton} onClick={submitForm} variant=\"contained\" color=\"primary\">Submit</Button>\n                  </Box>\n                  \n                  \n                </Grid>\n                <Grid item xs={6}>\n                  <FormControl>\n\n                    <ImageUploader\n                      withIcon={true}\n                      buttonText={ buttonText }\n                      imgExtension={['.jpg', 'jpeg', '.png', 'svg']}\n                      maxFileSize={5242880}\n                      withPreview={true}\n                      onChange={setImage}\n                      singleImage={true}\n                      {...defaultImageOption }                  \n                      \n                    />\n                  </FormControl>\n                </Grid>\n              </Grid>  \n            )}\n        </form>\n      </div>\n    );\n  }\n}\n\nComponent.propTypes = {\n  submitAction: PropTypes.func,\n  post: PropTypes.object,\n  className: PropTypes.string,\n  request: PropTypes.object,\n  user: PropTypes.object,\n};\n\nComponent.defaultProps = {\n  post: {\n    id: '',\n    title: '',\n    text: '',\n    email: '',\n    phone: '',\n    price: '',\n    location: '',    \n  }, \n};\n\nconst mapStateToProps = state => ({\n  user: get(state),\n});\n\n// const mapDispatchToProps = dispatch => ({\n//   someAction: arg => dispatch(reduxActionCreator(arg)),\n// });\n\nconst Container = connect(mapStateToProps)(Component);\n\nexport {\n  // Component as SubmitPostForm,\n  Container as SubmitPostForm,\n  Component as SubmitPostFormComponent,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Typography, Paper } from '@material-ui/core';\nimport clsx from 'clsx';\n\n// import { connect } from 'react-redux';\n// import { reduxSelector, reduxActionCreator } from '../../../redux/exampleRedux.js';\n\nimport styles from './PageHeader.module.scss';\n\nconst Component = ({className, title}) => (\n  <div className={clsx(className, styles.root)}>\n    <Paper className={styles.titlePaper}>\n      <Typography className={styles.title} variant='h3'>{title}</Typography>\n    </Paper>\n  </div>\n);\n\nComponent.propTypes = {\n  title: PropTypes.node,\n  className: PropTypes.string,\n};\n\n// const mapStateToProps = state => ({\n//   someProp: reduxSelector(state),\n// });\n\n// const mapDispatchToProps = dispatch => ({\n//   someAction: arg => dispatch(reduxActionCreator(arg)),\n// });\n\n// const Container = connect(mapStateToProps, mapDispatchToProps)(Component);\n\nexport {\n  Component as PageHeader,\n  // Container as PageHeader,\n  Component as PageHeaderComponent,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport clsx from 'clsx';\n\nimport { connect } from 'react-redux';\n// import { reduxSelector, reduxActionCreator } from '../../../redux/exampleRedux.js';\nimport { getAll } from '../../../redux/postsRedux.js';\n\nimport styles from './PostEdit.module.scss';\nimport { SubmitPostForm } from '../../common/SubmitPostForm/SubmitPostForm';\nimport { PageHeader } from '../../common/PageHeader/PageHeader.js';\n\nclass Component extends React.Component {\n\n  // to pobierzemy z reduxa do propsów\n  editPost = (formData) => {\n    for (var pair of formData.entries()) {\n      console.log(pair[0]+ ', ' + pair[1]); \n    }\n  }\n\n  render = () => {\n    const {className, post} = this.props;\n    return (\n      <div className={clsx(className, styles.root)}>\n        <PageHeader title=\"Edit your post\" />\n        <SubmitPostForm post={post} submitAction={this.editPost}/>\n      </div>\n    );\n  }\n}\n\nComponent.propTypes = {\n  post: PropTypes.object,\n  className: PropTypes.string,\n};\n\nconst mapStateToProps = (state, props) => ({\n  post: getAll(state).find(p => p.id === props.match.params.id),\n});\n\n// const mapDispatchToProps = dispatch => ({\n//   someAction: arg => dispatch(reduxActionCreator(arg)),\n// });\n\n// const Container = connect(mapStateToProps, mapDispatchToProps)(Component);\nconst Container = connect(mapStateToProps)(Component);\n\nexport {\n  // Component as PostEdit,\n  Container as PostEdit,\n  Component as PostEditComponent,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport clsx from 'clsx';\n\nimport { connect } from 'react-redux';\nimport { addPostRequest, getRequest } from '../../../redux/postsRedux.js';\n\nimport styles from './PostAdd.module.scss';\n\nimport { SubmitPostForm } from '../../common/SubmitPostForm/SubmitPostForm';\nimport { PageHeader } from '../../common/PageHeader/PageHeader.js';\n\nclass Component extends React.Component {\n\n  \n  render = () => {\n    const {className, addPost, request} = this.props;\n    return (\n      <div className={clsx(className, styles.root)}>\n        <PageHeader title=\"Add new post\" />\n        <SubmitPostForm request={request} submitAction={addPost}/>\n      </div>\n    );\n  }\n}\nComponent.propTypes = {\n  addPost: PropTypes.func,\n  className: PropTypes.string,\n  request: PropTypes.object,\n};\n\nconst mapStateToProps = state => ({\n  request: getRequest(state, 'ADD_POST'),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  addPost: arg => dispatch(addPostRequest(arg)),\n});\n\nconst Container = connect(mapStateToProps, mapDispatchToProps)(Component);\n\nexport {\n  // Component as PostAdd,\n  Container as PostAdd,\n  Component as PostAddComponent,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport clsx from 'clsx';\n\n// import { connect } from 'react-redux';\n// import { reduxSelector, reduxActionCreator } from '../../../redux/exampleRedux.js';\n\nimport styles from './UserPosts.module.scss';\n\nconst Component = ({className, children}) => (\n  <div className={clsx(className, styles.root)}>\n    <h2>UserPosts</h2>\n    {children}\n  </div>\n);\n\nComponent.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n};\n\n// const mapStateToProps = state => ({\n//   someProp: reduxSelector(state),\n// });\n\n// const mapDispatchToProps = dispatch => ({\n//   someAction: arg => dispatch(reduxActionCreator(arg)),\n// });\n\n// const Container = connect(mapStateToProps, mapDispatchToProps)(Component);\n\nexport {\n  Component as UserPosts,\n  // Container as UserPosts,\n  Component as UserPostsComponent,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Typography, Paper, Table, TableCell, TableBody, TableRow, Button, Grid } from '@material-ui/core';\nimport { Link } from 'react-router-dom';\n\nimport clsx from 'clsx';\n\nimport { connect } from 'react-redux';\n// import { reduxSelector, reduxActionCreator } from '../../../redux/exampleRedux.js';\nimport { get } from '../../../redux/userRedux.js';\n\nimport styles from './PostsList.module.scss';\n\nconst Component = ({className, posts, user }) => (\n  <div className={clsx(className, styles.root)}>\n    <Grid container direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\">      \n      <Typography className={styles.title} variant='h4'>Pick a post for details</Typography>    \n      { user.loggedIn && <Button to={'/post/add'} component={Link}>Add new post</Button> }   \n    </Grid>\n    <Paper className={styles.component}>\n      <Table>       \n        <TableBody>\n          {posts.map(post => (\n            <TableRow key={post.id}>              \n              <TableCell>                \n                <Button to={`/post/${post.id}`}  component={Link}>\n                  {post.title}\n                </Button>                \n              </TableCell>\n             \n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </Paper>\n\n  </div>\n);\n\nComponent.propTypes = {\n  posts: PropTypes.array,\n  className: PropTypes.string,\n  user: PropTypes.object,\n};\n\nconst mapStateToProps = state => ({\n  user: get(state),\n});\n\n// const mapDispatchToProps = dispatch => ({\n//   someAction: arg => dispatch(reduxActionCreator(arg)),\n// });\n\n// const Container = connect(mapStateToProps, mapDispatchToProps)(Component);\nconst Container = connect(mapStateToProps)(Component);\nexport {\n  // Component as PostsList,\n  Container as PostsList,\n  Component as PostsListComponent,\n};\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { PageHeader } from '../../common/PageHeader/PageHeader';\nimport clsx from 'clsx';\n\nimport { connect } from 'react-redux';\n// import { reduxSelector, reduxActionCreator } from '../../../redux/exampleRedux.js';\nimport { getAll, loadPostsRequest} from '../../../redux/postsRedux.js';\n\nimport styles from './Homepage.module.scss';\nimport { PostsList } from '../../common/PostsList/PostsList';\n\n/*\nclass Component extends React.Component {\n  componentDidMount = () => {\n    const {posts, loadPosts} = this.props;\n    console.log('posts.length in render: ', posts.length);\n    // if (!posts.length) {\n    loadPosts(posts);\n    // }\n  }\n  render = () => {\n    const {className, posts} = this.props;\n    \n    return (\n      <div className={clsx(className, styles.root)}>\n        <PageHeader title=\"All posts chronologically\" />\n        <PostsList posts={posts}/>\n      </div>\n    );\n  };\n}\n*/\n\n/*\nconst Component = (props) => {  \n  const [givenProps] = useState(props);\n  useEffect(() => {\n    const { posts, loadPosts} = givenProps; \n    console.log('posts.length in render: ', posts.length);\n    // if (!posts.length) {\n    loadPosts(posts);\n    // }\n  }, [givenProps]);\n\n  const {className, posts} = props;    \n  return (\n    <div className={clsx(className, styles.root)}>\n      <PageHeader title=\"All posts chronologically\" />\n      <PostsList posts={posts}/>\n    </div>\n  );\n};\n*/\nconst Component = (props) => {\n\n  const fetchPosts = () => {\n    const { posts, loadPosts} = props; \n    console.log('posts.length in render: ', posts.length);    \n    loadPosts(posts);\n  };\n\n  useEffect(fetchPosts, []);\n\n  const {className, posts} = props;    \n  return (\n    <div className={clsx(className, styles.root)}>\n      <PageHeader title=\"All posts chronologically\" />\n      <PostsList posts={posts}/>\n    </div>\n  );\n};\n\nComponent.propTypes = {\n  posts: PropTypes.array,\n  className: PropTypes.string,\n  loadPosts: PropTypes.func,\n};\n\nconst mapStateToProps = state => ({\n  posts: getAll(state).map(p => ({id: p.id, title: p.title})),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  loadPosts: (payload) => dispatch(loadPostsRequest(payload)),\n});\n\n// const Container = connect(mapStateToProps, mapDispatchToProps)(Component);\nconst Container = connect(mapStateToProps, mapDispatchToProps)(Component);\n\nexport {\n  // Component as Homepage,\n  Container as Homepage,\n  Component as HomepageComponent,\n};\n\n/*\nŻeby nie było pętli (a nawet przy wstawieniu warunku na length będzie kilka bo przywoływana funkcja jest za każdym razem nowym obiektem),\nidzie o to, żeby useEffect odpalił tylko jeden raz. Można dać useEffect(callback, []), \nale eslint wywala jeśli w callbacku są zależności nie wymienione w tablicy.\nTrzy rozwiązania wykombinowałem.\n1. Najfajniejsze, żeby ten callback był zmienną, wtedy eslint się nie buntuje.\n2. Można po prostu wyłączyć eslint dając // eslint-disable-next-line react-hooks/exhaustive-deps\n3. Podać w tablicy kopię propsów wcześniej zapisaną w stanie. I z tej kopii pobrać zależności w callbacku.\n*/\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Typography, Paper, Grid, Button } from '@material-ui/core';\nimport {Link} from 'react-router-dom';\nimport axios from 'axios';\nimport { API_URL } from '../../../config.js';\n\nimport clsx from 'clsx';\n\nimport { connect } from 'react-redux';\nimport { PHOTO_URL } from '../../../config.js';\n// import { reduxSelector, reduxActionCreator } from '../../../redux/exampleRedux.js';\nimport { getPost } from '../../../redux/postsRedux.js';\nimport { get } from '../../../redux/userRedux.js';\n\nimport styles from './Post.module.scss';\nimport { Alert, AlertTitle } from '@material-ui/lab';\n\nclass Component extends React.Component { \n  state = {\n    post: {},\n    error: false,\n    imageLoaded: false,\n  }\n  // Jeśli post będzie z dedykownego temu komponentowi Reduxa , to po zmianie na Home, stary post będzie ciągle w reduxie zanim załaduje się nowy.\n  // Jeśli post będzie brany z reduxa odpalonego w Home, to jeśli się wejdzie na spronę post z pominięciem Home, to postu nie będzie\n  // Najlepiej załadować te posty w komponencie App\n  // Tutaj trenuję ładowanie bezpośrednio do komponentu Post i do jego stanu, edit zaś zciąga to z reduxa odpalonego w Home.\n  componentDidMount = () => {\n    const fetchPost = async () => {\n      try {\n        const response = await axios.get(API_URL + '/posts/' + this.props.match.params.id);\n        this.setState({...this.state, post: response.data, error: false});\n        \n      } catch(err) {\n        this.setState({...this.state, error: true});\n      }\n    };\n    fetchPost();\n  }\n  setImageLoaded = (booleanValue) => {\n    this.setState({...this.state, imageLoaded: booleanValue});\n  }\n  render = () => {\n    const {className, user} = this.props;\n    const { post, error, imageLoaded } = this.state;\n    return (\n      <div className={clsx(className, styles.root)}>\n        { (error) && <Alert severity=\"error\" ><AlertTitle>Error</AlertTitle></Alert> }\n        <Paper className={styles.titlePaper}>\n          <Typography className={styles.title} variant='h4'>\n            Post: {post.title}\n            {\n              user.loggedIn && (user.role === 'admin' || user.id === post.author) \n              && <Button className={styles.edit} to={`/post/${post.id}/edit`} component={Link}>EDIT</Button>\n            }\n          </Typography>\n        </Paper>\n        <Grid container spacing={5}>\n          <Grid item xs={6}>\n            <div className={styles.image}>\n              { post.photo && !imageLoaded && <div className={styles.placeholder}>Loading...</div>}\n              { post.photo && <img onLoad={() => this.setImageLoaded(true)} className={imageLoaded ? styles.visible : styles.hidden} src={`${PHOTO_URL}/${post.photo}`} alt='announcement'/> }\n              { !post.photo && <div className={styles.placeholder}>No photo attached</div>}\n            </div>\n            \n          </Grid>\n          <Grid container spacing={1} item xs={6}>  \n            <Grid item xs={12}>\n              <Typography variant='h6'>{post.text}</Typography>\n            </Grid>  \n            <Grid item xs={6}>\n              <Typography variant='body2'>\n                Price:\n              </Typography>\n            </Grid>\n            <Grid item xs={6}>\n              <Typography variant='body2'>\n                {post.price}\n              </Typography>\n            </Grid>\n            <Grid item xs={6}>\n              <Typography variant='body2'>\n                Email:\n              </Typography>\n            </Grid>\n            <Grid item xs={6}>\n              <Typography variant='body2'>\n                {post.email}\n              </Typography>\n            </Grid>\n            <Grid item xs={6}>\n              <Typography variant='body2'>\n                Last Edit:\n              </Typography>\n            </Grid>\n            <Grid item xs={6}>\n              <Typography variant='body2'>\n                {post.editDate}\n              </Typography>\n            </Grid>\n          \n            <Grid item xs={6}>\n              <Typography variant='body2'>\n                Location:\n              </Typography>\n            </Grid>\n            <Grid item xs={6}>\n              <Typography variant='body2'>\n                {post.location}\n              </Typography>\n            </Grid>\n            <Grid item xs={6}>\n              <Typography variant='body2'>\n                Status:\n              </Typography>\n            </Grid>\n            <Grid item xs={6}>\n              <Typography variant='body2'>\n                {post.status}\n              </Typography>\n            </Grid>\n            <Grid item xs={6}>\n              <Typography variant='body2'>\n                Published on:\n              </Typography>\n            </Grid>\n            <Grid item xs={6}>\n              <Typography variant='body2'>\n                {post.publishDate}\n              </Typography>\n            </Grid> \n          </Grid>\n        </Grid>\n      </div>\n    );\n  }\n}\n\nComponent.propTypes = {\n  user: PropTypes.object,\n  // post: PropTypes.object,\n  className: PropTypes.string,\n  // postId: PropTypes.string,\n  // loadPost: PropTypes.func,\n  match: PropTypes.object,\n};\n\nconst mapStateToProps = (state, props) => ({\n  // post: getPost(state, props.match.params.id),\n  user: get(state),\n});\n/*\nconst mapDispatchToProps = dispatch => ({\n  loadPost: arg => dispatch(loadPostRequest(arg)),\n});\n*/\n// const Container = connect(mapStateToProps, mapDispatchToProps)(Component);\nconst Container = connect(mapStateToProps)(Component);\n\nexport {\n  // Component as Post,\n  Container as Post,\n  Component as PostComponent,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { PageHeader } from '../../common/PageHeader/PageHeader';\nimport clsx from 'clsx';\n\n// import { connect } from 'react-redux';\n// import { reduxSelector, reduxActionCreator } from '../../../redux/exampleRedux.js';\n\nimport styles from './NotFound.module.scss';\n\nconst Component = ({className, children}) => (\n  <div className={clsx(className, styles.root)}>\n    <PageHeader title=\"Page is not found\" />    \n  </div>\n  \n);\n\nComponent.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n};\n\n// const mapStateToProps = state => ({\n//   someProp: reduxSelector(state),\n// });\n\n// const mapDispatchToProps = dispatch => ({\n//   someAction: arg => dispatch(reduxActionCreator(arg)),\n// });\n\n// const Container = connect(mapStateToProps, mapDispatchToProps)(Component);\n\nexport {\n  Component as NotFound,\n  // Container as NotFound,\n  Component as NotFoundComponent,\n};\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { get } from '../../../redux/userRedux.js';\n\nimport { PostEdit } from '../../views/PostEdit/PostEdit';\nimport { PostAdd } from '../../views/PostAdd/PostAdd';\nimport { UserPosts } from '../../views/UserPosts/UserPosts';\nimport { Homepage } from '../../views/Homepage/Homepage';\nimport { Post } from '../../views/Post/Post';\nimport { NotFound } from '../../views/NotFound/NotFound';\n\nconst Component = ({user}) => (\n  <Switch>\n    { user.loggedIn && <Route exact path='/userposts/:id' component={UserPosts} /> }\n    { user.loggedIn && <Route exact path='/post/add' component={PostAdd} /> }\n    { user.loggedIn && <Route exact path='/post/:id/edit' component={PostEdit} /> }    \n    <Route exact path='/' component={Homepage} />\n    <Route exact path='/post/add' component={NotFound} />\n    <Route exact path='/post/:id' component={Post} />\n    <Route path='*' component={NotFound} />\n  </Switch>);\n\nComponent.propTypes = {\n  user: PropTypes.object,\n};\n\n\nconst mapStateToProps = state => ({\n  user: get(state),\n});\nconst Container = connect(mapStateToProps)(Component);\nexport {\n  // Component as Routes,\n  Container as Routes,\n  Component as RoutesComponent,\n};\n","import React from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\n\nimport { createTheme, StylesProvider, ThemeProvider } from '@material-ui/core/styles';\nimport { CssBaseline } from '@material-ui/core';\n\nimport { store } from './redux/store';\n\nimport { MainLayout } from './components/layout/MainLayout/MainLayout';\nimport { Routes } from './components/features/Routes/Routes';\n\n\n\n\nconst theme = createTheme({\n  palette: {\n    primary: { main: '#2B4C6F' },\n  },\n});\n\nconst App = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <StylesProvider injectFirst>\n        <ThemeProvider theme={theme}>\n          <CssBaseline />\n          <MainLayout>\n            <Routes />\n          </MainLayout>\n        </ThemeProvider>\n      </StylesProvider>\n    </BrowserRouter>\n  </Provider>\n);\n\n\n\nexport { App };\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './styles/global.scss';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"titlePaper\":\"Post_titlePaper__2OXTS\",\"title\":\"Post_title__17nn2\",\"image\":\"Post_image__1U6m1\",\"hidden\":\"Post_hidden__2nCyz\",\"visible\":\"Post_visible__gAH4z\",\"placeholder\":\"Post_placeholder__CVPrl\",\"edit\":\"Post_edit__1x3Zz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"PageNav_root__bdF2f\",\"link\":\"PageNav_link__1jSdq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"box\":\"SubmitPostForm_box__xjoG1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"titlePaper\":\"PageHeader_titlePaper__3SyUG\",\"title\":\"PageHeader_title__M3hIP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"PostsList_title__TwsZI\"};"],"sourceRoot":""}